#include <string>
#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
#include <set>
#include "esp_log.h"
#include "esp_err.h"
#include "esp_http_client.h"
#include "esp_crt_bundle.h"
#include "esp_console.h"
#include "linenoise/linenoise.h"
#include "gemini.h"
#include "credentials.h"

void print_citations(cJSON* metadata) {
    if (!cJSON_HasObjectItem(metadata, "groundingSupports") || !cJSON_HasObjectItem(metadata, "groundingChunks")) {
        return;
    }

    cJSON *supports = cJSON_GetObjectItem(metadata, "groundingSupports");
    cJSON *chunks = cJSON_GetObjectItem(metadata, "groundingChunks");

    if (!cJSON_IsArray(supports) || !cJSON_IsArray(chunks)) {
        return;
    }

    std::set<int> used_indices;
    int num_sup = cJSON_GetArraySize(supports);
    for (int i = 0; i < num_sup; i++) {
        cJSON *sup = cJSON_GetArrayItem(supports, i);
        cJSON *indices = cJSON_GetObjectItem(sup, "groundingChunkIndices");
        if (!indices || !cJSON_IsArray(indices)) continue;
        int num_idx = cJSON_GetArraySize(indices);
        for (int k = 0; k < num_idx; k++) {
            cJSON *i_json = cJSON_GetArrayItem(indices, k);
            if (!i_json || !cJSON_IsNumber(i_json)) continue;
            int idx = i_json->valueint;
            if (idx >= 0 && idx < cJSON_GetArraySize(chunks)) {
                used_indices.insert(idx);
            }
        }
    }

    if (used_indices.empty()) return;

    printf("\nCitations:\n");
    for (int idx : used_indices) {
        cJSON *chunk = cJSON_GetArrayItem(chunks, idx);
        if (!chunk || !cJSON_HasObjectItem(chunk, "web")) continue;
        cJSON *web = cJSON_GetObjectItem(chunk, "web");
        if (!web || !cJSON_HasObjectItem(web, "uri")) continue;
        cJSON *uri_json = cJSON_GetObjectItem(web, "uri");
        if (!uri_json || !cJSON_IsString(uri_json)) continue;
        printf("[%d] %s\n", idx + 1, uri_json->valuestring);
    }
}

void process_data_line(const std::string& line, HttpData* data) {
    if (line.rfind("data: ", 0) != 0) {
        return;  // Skip non-data lines
    }
    std::string json_str = line.substr(6);  // Skip "data: "
    // Trim leading whitespace if any
    size_t start = json_str.find_first_not_of(" \t");
    if (start != std::string::npos) {
        json_str = json_str.substr(start);
    }
    // Trim trailing whitespace if any
    size_t end = json_str.find_last_not_of(" \t");
    if (end != std::string::npos) {
        json_str = json_str.substr(0, end + 1);
    }
    if (json_str == "[DONE]") {
        return;
    }
    cJSON *json = cJSON_Parse(json_str.c_str());
    if (json == NULL) {
        ESP_LOGE(TAG, "Failed to parse JSON: %s", json_str.c_str());
        return;
    }
    cJSON *candidates = cJSON_GetObjectItem(json, "candidates");
    if (candidates && cJSON_IsArray(candidates)) {
        cJSON *candidate = cJSON_GetArrayItem(candidates, 0);
        if (candidate) {
            cJSON *content = cJSON_GetObjectItem(candidate, "content");
            if (content) {
                cJSON *parts = cJSON_GetObjectItem(content, "parts");
                if (parts && cJSON_IsArray(parts)) {
                    cJSON *part = cJSON_GetArrayItem(parts, 0);
                    if (part) {
                        cJSON *thought_flag = cJSON_GetObjectItem(part, "thought");
                        cJSON *text = cJSON_GetObjectItem(part, "text");
                        if (text && cJSON_IsString(text)) {
                            if (thought_flag && cJSON_IsBool(thought_flag) && cJSON_IsTrue(thought_flag)) {
                                if (data->thoughts.empty()) {
                                    printf("Thoughts :\n");
                                }
                                printf("%s", text->valuestring);
                                data->thoughts += text->valuestring;
                            } else {
                                if (data->answer.empty()) {
                                    printf("Answer:\n");
                                }
                                printf("%s", text->valuestring);
                                data->answer += text->valuestring;
                            }
                        }
                    }
                }
            }
            // Handle grounding metadata
            cJSON *gmeta = cJSON_GetObjectItem(candidate, "groundingMetadata");
            if (gmeta && cJSON_IsObject(gmeta)) {
                if (data->grounding_metadata) {
                    cJSON_Delete(data->grounding_metadata);
                }
                data->grounding_metadata = cJSON_Duplicate(gmeta, 1);
            }
        }
    }
    cJSON_Delete(json);
}

esp_err_t http_event_handler(esp_http_client_event_t *evt) {
    HttpData* data = (HttpData*)evt->user_data;
    switch (evt->event_id) {
        case HTTP_EVENT_ON_DATA:
            if (!esp_http_client_is_chunked_response(evt->client)) {
                return ESP_OK;
            }
            data->response_buffer.append((char*)evt->data, evt->data_len);
            size_t pos;
            while ((pos = data->response_buffer.find('\n')) != std::string::npos) {
                std::string line = data->response_buffer.substr(0, pos);
                data->response_buffer.erase(0, pos + 1);
                process_data_line(line, data);
            }
            break;
        default:
            break;
    }
    return ESP_OK;
}

void process_full_buffer(HttpData* data) {
    size_t pos;
    // Process any complete lines left in the buffer
    while ((pos = data->response_buffer.find('\n')) != std::string::npos) {
        std::string line = data->response_buffer.substr(0, pos);
        data->response_buffer.erase(0, pos + 1);
        process_data_line(line, data);
    }
    // Handle any trailing incomplete line (e.g., last chunk without \n)
    if (!data->response_buffer.empty()) {
        std::string line = data->response_buffer;
        data->response_buffer.clear();
        process_data_line(line, data);
    }
    ESP_LOGI(TAG, "Stream processing complete. Final thoughts: %zu chars, answer: %zu chars", data->thoughts.length(), data->answer.length());
}

void http_task(void *pvParameters) {
    ESP_LOGI(TAG, "Waiting for WiFi connection...");
    if (xSemaphoreTake(wifi_connected, pdMS_TO_TICKS(60000)) != pdTRUE) {
        ESP_LOGE(TAG, "Failed to connect to WiFi");
        vTaskDelete(NULL);
        return;
    }

    while (true) {
        char *line = linenoise("Enter prompt> ");
        if (!line) continue;
        if (strlen(line) == 0) {
            free(line);
            continue;
        }

        HttpData data;
        data.response_buffer.reserve(1024);
        data.grounding_metadata = nullptr;

        // Build request JSON with user prompt
        cJSON *root = cJSON_CreateObject();
        cJSON *contents = cJSON_AddArrayToObject(root, "contents");
        cJSON *content = cJSON_CreateObject();
        cJSON_AddItemToArray(contents, content);
        cJSON *parts = cJSON_AddArrayToObject(content, "parts");
        cJSON *part = cJSON_CreateObject();
        cJSON_AddStringToObject(part, "text", line);
        cJSON_AddItemToArray(parts, part);

        cJSON *tools = cJSON_AddArrayToObject(root, "tools");
        cJSON *tool_obj = cJSON_CreateObject();
        cJSON_AddObjectToObject(tool_obj, "google_search");
        cJSON_AddItemToArray(tools, tool_obj);

        cJSON *generationConfig = cJSON_AddObjectToObject(root, "generationConfig");
        cJSON *thinkingConfig = cJSON_AddObjectToObject(generationConfig, "thinkingConfig");
        cJSON_AddBoolToObject(thinkingConfig, "includeThoughts", 1);
        char *post_data = cJSON_PrintUnformatted(root);
        cJSON_Delete(root);

        char url[256];
        snprintf(url, sizeof(url),
                 "https://generativelanguage.googleapis.com/v1beta/models/"
                 "gemini-flash-latest:streamGenerateContent?alt=sse&key=%s",
                 API_KEY);

        esp_http_client_config_t config = {};
        config.url = url;
        config.method = HTTP_METHOD_POST;
        config.event_handler = http_event_handler;
        config.user_data = &data;
        config.crt_bundle_attach = esp_crt_bundle_attach;

        esp_http_client_handle_t client = esp_http_client_init(&config);
        esp_http_client_set_header(client, "Content-Type", "application/json");
        esp_http_client_set_post_field(client, post_data, strlen(post_data));

        ESP_LOGI(TAG, "Sending prompt: %s", line);
        esp_err_t err = esp_http_client_perform(client);
        process_full_buffer(&data);
        if (err == ESP_OK) {
            ESP_LOGI(TAG, "HTTP POST Status = %d",
                     esp_http_client_get_status_code(client));
            printf("\n");
            if (data.grounding_metadata) {
                print_citations(data.grounding_metadata);
                cJSON_Delete(data.grounding_metadata);
            } else {
                printf("No grounding metadata available.\n");
            }
        } else {
            ESP_LOGE(TAG, "HTTP POST failed: %s", esp_err_to_name(err));
        }

        esp_http_client_cleanup(client);
        free(post_data);
        linenoiseHistoryAdd(line);
        free(line);
    }
}